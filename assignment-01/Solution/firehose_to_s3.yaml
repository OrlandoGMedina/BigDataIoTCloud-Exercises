##
# CloudFormation script created for 'entrega01 assignment'
# Use 'aws cloudformation create-stack --stack-name StackEntrega1Firehose --template-body file://stream_to_firehose_to_s3.yaml --capabilities CAPABILITY_NAMED_IAM'
# to create the stack
# 
# Use 'aws cloudformation delete-stack --stack-name StackEntrega1Firehose' 
# to delete the stack but first run the following command 
# 'aws s3 ls | grep aws-firehose | awk {'print "aws s3 rb s3://" $3 " --force"'}| sh'
#
# to validate run 'aws cloudformation validate-template --template-body file://stream_to_firehose_to_s3.yaml'
#
##
Description: Stack for Firehose DeliveryStream S3 Destination.

AWSTemplateFormatVersion: 2010-09-09

Parameters:
##
# p(parameter)BucketName:
# Specify the default bucket name 
# to receive streams generated by Firehose
##
  pBucketName:
    Description: 'S3 Bucket Name'
    Type: String
    Default: 'aws-kinesis-firehose-deliverystream'

Resources:
##
# r(resource)FirehoseDeliveryStream:
# Firehose created for 'entrega01 assignment'
# to receive streams generated by an ad-hoc
# python program
##
  rFirehoseDeliveryStream:
    DependsOn:
      - rDeliveryPolicy
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: firehose_to_s3_stream_from_py
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join
          - ''
          - - 'arn:aws:s3:::'
            - !Ref rS3Bucket
        BufferingHints:
          IntervalInSeconds: '60'
          SizeInMBs: '50'
        CompressionFormat: UNCOMPRESSED
        Prefix: data/input/firehose/streams/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}
        ErrorOutputPrefix: data/input/firehose/error
        RoleARN: !GetAtt rDeliveryRole.Arn
##
# r(resource)rS3Bucket:
# S3 Bucket for receiving delivered streams 
# by Firehose, access granted by rDeliveryRole
##
  rS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ -, [ !Ref pBucketName, !Ref AWS::AccountId ] ]
      VersioningConfiguration:
        Status: Enabled
##
# r(resource)DeliveryRole:
# IAM Role to 'Allow' Firehose to 'AssumeRole' 
##
  rDeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'
##
# r(resource)DeliveryPolicy:
# Policy associated to IAM Role to 'Allow' 
# Firehose several S3 actions 
##
  rDeliveryPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: firehose_to_s3_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref rS3Bucket
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref rS3Bucket
                  - '*'
      Roles:
        - !Ref rDeliveryRole
